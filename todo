#!/bin/bash

TODO_DIR="$HOME/.todo"
TODO_FILE="$TODO_DIR/todo.txt"
YES_NO="[Y/N]"

function check_todo_dir {
	if [ ! -d "$TODO_DIR" ]; then
		echo "Todo has not yet been setup, try running \"todo -s\"";
		exit 1;
	fi
}

function print_help {
echo "Welcome to Todo!

Usage:
	h|help)   Print this help page
	a|add)    Add an item
	t|toggle) Toggle checked state of an item (will enter interactive mode if no argument is given)
	d|delete) Delete an item (will enter interactive mode if no argument is given)
	r|reset)  Reset todo list
	f|fetch)  Fetch todo list from remote repository
	p|push)   Push todo list to remote repository
	s|setup)  Setup todo list
	c|clear)  Clear todo list
	";

	echo "Copyright (C) 2014 John Barbero Unenge"
}

function add_todo {
	check_todo_dir;
	if [ -z $1 ]; then
		 printf "Item to add: ";
		 read ITEM;
	else
		ITEM="$1";
	fi

	echo "- $ITEM" >> "$TODO_FILE"
	echo "Added item to local todo list, run todo -p to push list to remote"
	echo "";
	show_todo;
}

function toggle_todo {
	check_todo_dir;
	local i=1;
	IFS='
	';
	if [ -z $1 ]; then
		for row in $(cat "$TODO_FILE"); do
			echo "$i: $row";
			((i++));
		done
		printf "Item to check as done (number): ";
		read INDEX;
	else
		INDEX="$1";	
	fi

	local re='^[0-9]+$'
	if ! [[ $INDEX =~ $re ]]; then
		i=1;
		for row in $(cat "$TODO_FILE"); do
			if [ $(echo "$row" | grep -e "$INDEX") ]; then
				echo "Found \"$(echo "$row" | sed 's/[+,-] //g')\" at index $i using \"$INDEX\" as a regexp";
				INDEX=$i;
			fi
			((i++));
		done
		if ! [[ $INDEX =~ $re ]]; then
			echo "Unable to do anything useful with $1";
			exit 1;
		fi
	fi

	cp "$TODO_FILE" "/tmp/todo.txt"
	rm "$TODO_FILE";
	touch "$TODO_FILE";
	i=1;
	for row in $(cat "/tmp/todo.txt"); do
		if [ $i = $INDEX ]; then
			if [ $(echo "$row" | grep -e '^+') ]; then
				row=$(echo "$row" | sed 's/^+/-/g');
			else 
				row=$(echo "$row" | sed 's/^-/+/g');
			fi
		fi
		echo "$row" >> "$TODO_FILE";
		((i++));
	done
	rm "/tmp/todo.txt"

	echo "";
	show_todo;
}

function delete_todo {
	check_todo_dir;
	local i=1;
	IFS='
	';
	if [ -z $1 ]; then
		for row in $(cat "$TODO_FILE"); do
			echo "$i: $row";
			((i++));
		done
		printf "Item to remove (number): ";
		read INDEX;
	else
		INDEX="$1";	
	fi

	local re='^[0-9]+$'
	if ! [[ $INDEX =~ $re ]]; then
		i=1;
		for row in $(cat "$TODO_FILE"); do
			if [ $(echo "$row" | grep -e "$INDEX") ]; then
				printf "Found \"$(echo "$row" | sed 's/[+,-] //g')\" at index $i using \"$INDEX\" as a regexp, delete this item? $YES_NO: ";
				read ANSWER;
				case ${ANSWER} in
					n|N) echo "Aborting"; exit 1;
				esac
				INDEX=$i;
			fi
			((i++));
		done
		if ! [[ $INDEX =~ $re ]]; then
			echo "Unable to do anything useful with $1";
			exit 1;
		fi
	fi

	cp "$TODO_FILE" "/tmp/todo.txt"
	rm "$TODO_FILE";
	touch "$TODO_FILE";
	i=1;
	for row in $(cat "/tmp/todo.txt"); do
		if ! [ $i = $INDEX ]; then
			echo "$row" >> "$TODO_FILE";
		fi
		((i++));
	done
	rm "/tmp/todo.txt"

	echo "";
	show_todo;
}

function fetch_todo {
	echo "Fetching todo...";
	cd "$TODO_DIR";
	git add .;
	git commit -m "Update todo list";
	git push -u origin master;
	echo "Done!";
}

function reset_todo {
	check_todo_dir;
	
	printf "Are you sure $YES_NO: ";
	read ANSWER;
	case "${ANSWER}" in
		n|N) echo "Aborting"; exit 0;
	esac

	echo "Reseting todo list...";
	cd "$TODO_DIR";
	git reset --hard;
	echo "Done!";
}

function fetch_todo {
	check_todo_dir;
	echo "Fetching todos...";
	cd "$TODO_DIR";
	git pull --rebase;
	echo "Done!";
}

function push_todo {
	check_todo_dir;
	echo "Pushing todo...";
	cd "$TODO_DIR";
	git add .;
	git commit -m "Update todo list";
	git push -u origin master;
	echo "Done!";
}

function setup_todo {
	echo "Setting up todo...";
	echo "Where to you want to push your todo lists?: ";
	read TODO_REPO;

	git clone "$TODO_REPO" "$TODO_DIR";
	echo "Done!";
}

function show_todo {
	if [ ! -d "$TODO_DIR" ]; then
		echo "The folder \"$TODO_DIR\" does not exist, try running \"todo -s\" to setup your todo list";
		exit 1;
	elif [ ! -f "$TODO_FILE" ]; then
		echo "No todos";
		exit 1;
	else
		echo "Todo:";
		cat "$TODO_FILE";
	fi
}

function clear_todo {
	if [ -f "$TODO_FILE" ]; then
		rm "$TODO_FILE";
		touch "$TODO_FILE";
		echo "Cleared local todo list, run todo -p to push list to remote"
	fi
}

OPTERR=0;
while getopts htdrfpsca option
do
	case "${option}" in
		h|help) print_help; exit 0;;
		a|add) add_todo "$2"; exit 0;;
		t|toggle) toggle_todo "$2"; exit 0;;
		d|delete) delete_todo "$2"; exit 0;;
		r|reset) reset_todo; exit 0;;
		f|fetch) fetch_todo; exit 0;;
		p|push) push_todo; exit 0;;
		s|setup) setup_todo; exit 0;;
		c|clear) clear_todo; exit 0;;
		\?) echo "Illegal option -$OPTARG"; exit 1;;
	esac
done

show_todo;
exit 0;

